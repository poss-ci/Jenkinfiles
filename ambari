properties([parameters([text(defaultValue: '''x86ub16
x86ub18
x86rh7
x86rh75
ppcrh7
ppcrh75''', description: '', name: 'nodelabels')]), pipelineTriggers([cron('''TZ=Asia/Kolkata
H 6 * * 3''')]), buildDiscarder(logRotator(artifactDaysToKeepStr: '', artifactNumToKeepStr: '', daysToKeepStr: '30', numToKeepStr: '15')),])

def labels = nodelabels.split("\\r?\\n")
def builders = [:]
for (x in labels) {
    def label = x
    builders[label] = {
        node(label) {
            if (label.contains('host')) {
                runStages(label)
            } else {
                docker.image('base:v1').inside("-v /var/lib/jenkins/.m2/repository:/var/lib/jenkins/.m2/repository:rw,z") {
                    runStages(label)
                }
            }
        }
    }
}
def runStages(label) {
    stage('Compile ' + label) {
        checkout([$class: 'GitSCM', branches: [[name: 'trunk']], userRemoteConfigs: [[url: 'https://github.com/apache/ambari/']]])
        //sh "git apply /var/lib/jenkins/.m2/repository/patches/ambari/*.patch"
        
        sh '''                    
            mvn clean
            mkdir -p /var/lib/jenkins/workspace/ambari/ambari-metrics/ambari-metrics-timelineservice/target/embedded/
            cp /var/lib/jenkins/.m2/repository/patches/ambari/hbase-2.0.0.3.0.0.0-1181-bin.tar.gz /var/lib/jenkins/workspace/ambari/ambari-metrics/ambari-metrics-timelineservice/target/embedded/hbase.tar.gz
            cp /var/lib/jenkins/.m2/repository/patches/ambari/phoenix-5.0.0.3.0.0.0-1181.tar.gz /var/lib/jenkins/workspace/ambari/ambari-metrics/ambari-metrics-timelineservice/target/embedded/phoenix.tar.gz
            mkdir -p /var/lib/jenkins/workspace/ambari/ambari-metrics/ambari-metrics-assembly/target/embedded
            cp /var/lib/jenkins/.m2/repository/patches/ambari/hadoop-3.0.0.3.0.0.0-1181.tar.gz /var/lib/jenkins/workspace/ambari/ambari-metrics/ambari-metrics-assembly/target/embedded/hadoop.tar.gz
            mvn install -DskipTests
        '''
    }
    stage('Test ' + label) {
        try {
            sh "mvn test -fn"
        } finally {
            junit '**/target/surefire-reports/TEST-*.xml'
            archive '**/target/*.jar'
        }
    }
}
parallel builders
